##############################################################################
#
#    Copyright (c) 2005 - 2015 by Vivante Corp.
#    
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the license, or
#    (at your option) any later version.
#    
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU General Public License for more details.
#    
#    You should have received a copy of the GNU General Public License
#    along with this program; if not write to the Free Software
#    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#
##############################################################################


#
# Common inlude file for Linux build.
#

################################################################
# Select prebuilt binary types.
FIXED_ARCH_TYPE ?=

################################################################
# Arch.

ARCH_TYPE       ?= arm
CPU_TYPE        ?= arm920
CPU_ARCH        ?= 0

gcdSTATIC_LINK  ?= 0
USE_OPENCL      ?= 1
ifeq ($(USE_OPENCL),1)
BUILD_OPENCL_ICD ?= 1
else
BUILD_OPENCL_ICD ?= 0
endif
EGL_API_FB      ?= 0
EGL_API_WL      ?= 0
EGL_API_DRI     ?= 0
EGL_API_DFB     ?= 0
EGL_API_X       ?= 0
GC355_MEM_PRINT ?= 0
USE_MOVG        ?= 0
USE_VDK         ?= 0
USE_PROFILER    ?= 0
USE_SW_FB       ?= 0
ABI             ?= 0
ANDROID         ?= 0
ENDIANNESS		?=
LINUX_OABI		?= 0
USE_ARMCC		?= 0
VIVANTE_ENABLE_2D ?= 1
VIVANTE_ENABLE_VG ?= 0
VIVANTE_ENABLE_3D ?= 1
VIVANTE_NO_VG   ?= 0
USE_NEON        ?= 0
USE_BANK_ALIGNMENT ?= 0
BANK_BIT_START  ?= 0
BANK_BIT_END    ?= 0
BANK_CHANNEL_BIT     ?= 0
USE_LOADTIME_OPT     ?= 1
YOCTO_DRI_BUILD      ?= 0

ifeq ($(gcdSTATIC_LINK), 1)

GL_11_APPENDIX ?= _es11
GL_2_APPENDIX  ?= _es2
GL_3_APPENDIX  ?= _es3

endif

NO_KERNEL       ?= 0

ifeq ($(LINUX_OABI), 1)
ABI             ?= 0
else
ABI             ?= aapcs-linux
endif

################################################################
# Toolchain.

ifeq ($(USE_ARMCC),1)
	ARM_BASE		?=	/home/software/ARM
	ARM_VERSION		?=	4.0/650
	CROSS_COMPILE	?=	$(ARM_BASE)/RVCT/Programs/$(ARM_VERSION)/linux-pentium/arm
	CFLAGS			+=	-I$(ARM_BASE)/RVCT/Data/$(ARM_VERSION)/include/unix
	CC     := $(CROSS_COMPILE)cc
	CXX    := $(CROSS_COMPILE)cc
	AR     := $(CROSS_COMPILE)ar
	AS     := $(CROSS_COMPILE)as
	LD     := $(CROSS_COMPILE)link
else
	CROSS_COMPILE ?= arm-none-linux-gnueabi-
	CC     := $(CROSS_COMPILE)gcc
	CXX    := $(CROSS_COMPILE)g++
	AR     := $(CROSS_COMPILE)ar
	AS     := $(CROSS_COMPILE)as
	LD     := $(CROSS_COMPILE)ld
	RANLIB := $(CROSS_COMPILE)ranlib
	STRIP  := $(CROSS_COMPILE)strip
endif

################################################################
# Resource.

TOOL_DIR     ?= /home/software/Linux
ANDROID_HOME ?=
KERNEL_DIR   ?= $(TOOL_DIR)/kernel
X11_ARM_DIR  ?= $(TOOL_DIR)/X11_ARM
ROOTFS_USR   ?= $(TOOL_DIR)/RootFS/usr
WAYLAND_DIR  ?= $(TOOL_DIR)/wayland

################################################################
# Target directory.

ifeq ($(DEBUG), 1)
OBJ_DIR	?= bin_d/$(ARCH_TYPE)
else
OBJ_DIR	?= bin_r/$(ARCH_TYPE)
endif

################################################################
# Force to use the new compiler.

SC2X_NEW ?= 1
ES11_NEW ?= 1

################################################################
# switch to build halti driver instead of es2 driver

BUILD_HALTI ?= 1

################################################################
# Release directory.

SDK_DIR ?= $(AQROOT)/build/sdk

################################################################
# Force to use dma_coherent_* stuff.

NO_DMA_COHERENT ?= 0

################################################################
# Set this value to 1 if you are using ARM L2 cache.

ENABLE_ARM_L2_CACHE	= 0

################################################################
# Set this value to 1 if you are using DOVE board.
CONFIG_DOVE_GPU = 0

###############################################################
# Common CFLAGS.

ifeq ($(VIVANTE_ENABLE_3D),0)
CFLAGS += -DgcdENABLE_3D=0
else
CFLAGS += -DgcdENABLE_3D=1
endif

ifeq ($(VIVANTE_ENABLE_2D),0)
CFLAGS += -DgcdENABLE_2D=0
else
CFLAGS += -DgcdENABLE_2D=1
endif

ifeq ($(VIVANTE_ENABLE_VG),0)
CFLAGS += -DgcdENABLE_VG=0
else
CFLAGS += -DgcdENABLE_VG=1
endif

ifeq ($(VIVANTE_NO_VG),1)
CFLAGS += -DVIVANTE_NO_VG
endif

ifeq ($(USE_ARMCC), 1)
	CFLAGS += --c99 #--strict
else
ifeq ($(ABI), 0)
else
	CFLAGS += -mabi=$(ABI)
endif

ifneq ($(ENDIANNESS),)
  CFLAGS += $(ENDIANNESS)
  LFLAGS += $(ENDIANNESS)
  PFLAGS += $(ENDIANNESS)
endif
endif

ifeq ($(ANDROID), 1)
    USE_VDK = 0
    CFLAGS += -DANDROID=1 -DANDROID_SDK_VERSION=$(PLATFORM_SDK_VERSION)
    CFLAGS += -I $(ANDROID_HOME)/libnativehelper/include/nativehelper -isystem $(ANDROID_HOME)/system/core/include -isystem $(ANDROID_HOME)/hardware/libhardware/include -isystem $(ANDROID_HOME)/hardware/libhardware_legacy/include -isystem $(ANDROID_HOME)/hardware/ril/include -isystem $(ANDROID_HOME)/libnativehelper/include -isystem $(ANDROID_HOME)/frameworks/native/include -isystem $(ANDROID_HOME)/frameworks/native/opengl/include -isystem $(ANDROID_HOME)/frameworks/av/include -isystem $(ANDROID_HOME)/frameworks/base/include -isystem $(ANDROID_HOME)/frameworks/base/opengl/include -isystem $(ANDROID_HOME)/external/skia/include -isystem $(ANDROID_PRODUCT_OUT)/obj/include -isystem $(ANDROID_HOME)/bionic/libc/include -isystem $(ANDROID_HOME)/bionic/libstdc++/include -isystem $(ANDROID_HOME)/bionic/libm/include -isystem $(ANDROID_HOME)/bionic/libthread_db/include
    CFLAGS += -fno-exceptions -Wno-multichar -ffunction-sections -fdata-sections -funwind-tables -fstack-protector -Wa,--noexecstack -Werror=format-security -D_FORTIFY_SOURCE=1 -fno-short-enums -Wno-psabi -fmessage-length=0 -W -Wall -Wno-unused -Winit-self -Wpointer-arith -Werror=return-type -Werror=non-virtual-dtor -Werror=address -Werror=sequence-point -DNDEBUG -g -Wstrict-aliasing=2 -fgcse-after-reload -frerun-cse-after-loop -frename-registers -UDEBUG -Os -fno-strict-aliasing -Wno-missing-field-initializers -Wno-unused-parameter -Wextra -fPIC -MD
    CXXFLAGS += -isystem $(ANDROID_HOME)/bionic -isystem $(ANDROID_HOME)/external/stlport/stlport

    ifeq ($(shell expr $(PLATFORM_SDK_VERSION) ">=" 20),1)
        CFLAGS += -isystem $(ANDROID_HOME)/system/core/libsync/include -isystem $(ANDROID_HOME)/bionic/libc/arch-$(ARCH_TYPE)/include -isystem $(ANDROID_HOME)/bionic/libc/kernel/uapi -isystem $(ANDROID_HOME)/bionic/libc/kernel/uapi/asm-$(ARCH_TYPE) -isystem $(ANDROID_HOME)/bionic/libm/include/$(ARCH_TYPE) -I $(ANDROID_HOME) -include build/core/combo/include/arch/linux-$(ARCH_TYPE)/AndroidConfig.h -I $(ANDROID_HOME)/build/core/combo/include/arch/linux-$(ARCH_TYPE)/
    else
        ifeq ($(ARCH_TYPE), arm)
            ifeq ($(shell expr $(PLATFORM_SDK_VERSION) ">=" 17),1)
                CFLAGS += -I $(ANDROID_HOME) -include build/core/combo/include/arch/linux-arm/AndroidConfig.h
            endif
            CFLAGS += -isystem $(ANDROID_HOME)/bionic/libc/arch-arm/include -I $(ANDROID_HOME)/build/core/combo/include/arch/linux-arm/ -isystem $(ANDROID_HOME)/bionic/libc/kernel/common -isystem $(ANDROID_HOME)/bionic/libc/kernel/arch-arm -isystem $(ANDROID_HOME)/bionic/libm/include/arm
        else ifeq ($(ARCH_TYPE), arm64)
            ifeq ($(shell expr $(PLATFORM_SDK_VERSION) ">=" 17),1)
                CFLAGS += -I $(ANDROID_HOME) -include build/core/combo/include/arch/linux-aarch64/AndroidConfig.h
            endif
            CFLAGS += -isystem $(ANDROID_HOME)/bionic/libc/arch-aarch64/include -I $(ANDROID_HOME)/build/core/combo/include/arch/linux-aarch64/ -isystem $(ANDROID_HOME)/bionic/libc/kernel/uapi -isystem $(ANDROID_HOME)/bionic/libc/kernel/uapi/asm-aarch64 -isystem $(ANDROID_HOME)/bionic/libc/kernel/common -isystem $(ANDROID_HOME)/bionic/libm/include/aarch64
        endif
    endif

    ifeq ($(shell expr $(PLATFORM_SDK_VERSION) ">=" 16),1)
        CFLAGS += -Wno-unused-but-set-variable -fno-strict-volatile-bitfields
    endif
    ifeq ($(shell expr $(PLATFORM_SDK_VERSION) ">=" 20),1)
        CFLAGS += -no-canonical-prefixes -fno-canonical-system-headers
    endif

    ifeq ($(USE_LOCAL_GRALLOC), 1)
        CFLAGS += -DUSE_LOCAL_GRALLOC=1 -I $(AQROOT)/driver/android/gralloc
    else
        CFLAGS += -DUSE_LOCAL_GRALLOC=0 -I $(ANDROID_HOME)/vendor/marvell/generic/marvell-gralloc
    endif

    ifeq ($(USE_HWC_GCU),1)
        CFLAGS += -DUSE_HWC_GCU=1
    else
        CFLAGS += -DUSE_HWC_GCU=0
    endif

    ifeq ($(ENABLE_GPUTEX),1)
        ifeq ($(ARCH_TYPE), arm)
            CFLAGS += -DCONFIG_ENABLE_GPUTEX
        endif
    endif

    ifeq ($(ARCH_TYPE), arm)
        CFLAGS += -fno-builtin-sin -fomit-frame-pointer -msoft-float -march=armv7-a -mfloat-abi=softfp -mfpu=neon -mthumb-interwork -mthumb
    else ifeq ($(ARCH_TYPE), arm64)
        ifneq ($(NEW_COMPILER), 1)
            # these flags are added by Android toolchain on 64bit master by default, but VSC_NEW will fail to compile
            CFLAGS += -Werror=pointer-to-int-cast -Werror=int-to-pointer-cast
        endif
    endif
endif

ifneq ($(USE_ARMCC),1)
	CFLAGS += -DLINUX
endif

ifeq ($(LINUX_OABI), 1)
	CFLAGS += -DLINUX_OABI
endif

ifneq ($(USE_ARMCC), 1)
	CFLAGS += -Wall -D_REENTRANT -fno-strict-aliasing

ifeq ($(CPU_TYPE), 0)
else
	CFLAGS += -mtune=$(CPU_TYPE)
	AFLAGS += -mtune=$(CPU_TYPE)
	LFLAGS += -mtune=$(CPU_TYPE)
	PFLAGS += -mtune=$(CPU_TYPE)
endif

ifeq ($(CPU_ARCH), 0)
else
	CFLAGS += -march=$(CPU_ARCH)
	AFLAGS += -march=$(CPU_ARCH)
	LFLAGS += -march=$(CPU_ARCH)
	PFLAGS += -march=$(CPU_ARCH)
endif
endif

ifeq ($(USE_BANK_ALIGNMENT), 1)
    CFLAGS += -DgcdENABLE_BANK_ALIGNMENT=1
    ifneq ($(BANK_BIT_START), 0)
	        ifneq ($(BANK_BIT_END), 0)
	            CFLAGS += -DgcdBANK_BIT_START=$(BANK_BIT_START)
	            CFLAGS += -DgcdBANK_BIT_END=$(BANK_BIT_END)
	        endif
    endif

    ifneq ($(BANK_CHANNEL_BIT), 0)
        CFLAGS += -DgcdBANK_CHANNEL_BIT=$(BANK_CHANNEL_BIT)
    endif
endif


ifeq ($(USE_NEON), 1)
	CFLAGS += -DgcdUSE_NEON -mfpu=neon -mfloat-abi=softfp
endif

ifeq ($(DEBUG), 1)
#	CFLAGS += -g3 -ggdb3 -O0 -DDEBUG -D_DEBUG -DgcdDEBUG=1
	CFLAGS += -g -O0 -DDEBUG -D_DEBUG -DgcdDEBUG=1
else
    ifeq ("$(DEBUG)", "valgrind")
        CFLAGS += -g -O -DgcdBUILT_FOR_VALGRIND=1
    else
        CFLAGS += -O2
    endif
endif

ifeq ($(EGL_API_FB), 1)
	CFLAGS += -DEGL_API_FB
endif

ifeq ($(EGL_API_WL), 1)
   CFLAGS += -DEGL_API_WL -DWL_EGL_PLATFORM -Wno-deprecated-declarations
   LFLAGS += -L$(ROOTFS_USR)/lib
endif

ifeq ($(EGL_API_DRI), 1)
    ifeq ($(YOCTO_DRI_BUILD), 1)
    CFLAGS += -DDRI_PIXMAPRENDER_ASYNC
    CFLAGS += -DDRI_PIXMAPRENDER_GL
    endif

    CFLAGS += -DEGL_API_DRI
    CFLAGS += -I$(X11_ARM_DIR)/include/arm-linux-gnueabi
endif

ifeq ($(EGL_API_DFB), 1)
    CFLAGS += -DEGL_API_DFB
endif

ifeq ($(EGL_API_X), 1)
    CFLAGS += -DEGL_API_X
    CFLAGS += -I$(X11_ARM_DIR)/include/arm-linux-gnueabi
endif

ifeq ($(EGL_API_ANDROID), 1)
    CFLAGS += -DEGL_API_ANDROID
endif

ifeq ($(STATIC_LINK), 1)
	CFLAGS += -DSTATIC_LINK
endif

ifeq ($(USE_VDK), 1)
	CFLAGS += -DUSE_VDK=1 -DUSE_SW_FB=$(USE_SW_FB)
else
	CFLAGS += -DUSE_VDK=0
endif

ifeq ($(USE_OPENCL), 1)
	CFLAGS += -DgcdUSE_OPENCL=1
else
	CFLAGS += -DgcdUSE_OPENCL=0
endif

ifeq ($(USE_NEW_LINUX_SIGNAL), 1)
	CFLAGS += -DUSE_NEW_LINUX_SIGNAL=1
endif

ifneq ($(USE_ARMCC), 1)
	CXXFLAGS += -fno-short-enums
endif

ifneq (,$(EGL_APPENDIX))
	CFLAGS += -D_EGL_APPENDIX=$(EGL_APPENDIX)
endif

ifeq ($(gcdSTATIC_LINK), 1)
	CFLAGS += -DgcdSTATIC_LINK=1
else
	CFLAGS += -DgcdSTATIC_LINK=0
endif

ifneq (,$(GL_2_APPENDIX))
	CFLAGS += -D_GL_2_APPENDIX=$(GL_2_APPENDIX)
endif

ifneq (,$(GL_11_APPENDIX))
	CFLAGS += -D_GL_11_APPENDIX=$(GL_11_APPENDIX)
endif

ifneq (,$(GL_3_APPENDIX))
	CFLAGS += -D_GL_3_APPENDIX=$(GL_3_APPENDIX)
endif

ifneq (,$(VG_APPENDIX))
	CFLAGS += -D_VG_APPENDIX=$(VG_APPENDIX)
endif

CFLAGS += -DgcdREGISTER_ACCESS_FROM_USER=1

ifeq ($(FPGA_BUILD), 1)
CFLAGS += -DgcdFPGA_BUILD=1
else
CFLAGS += -DgcdFPGA_BUILD=0
endif

ifeq ($(FORCE_ALL_VIDEO_MEMORY_CACHED), 1)
CFLAGS += -DgcdPAGED_MEMORY_CACHEABLE=1
else
CFLAGS += -DgcdPAGED_MEMORY_CACHEABLE=0
endif

ifeq ($(USE_LOADTIME_OPT), 1)
CFLAGS += -DGC_ENABLE_LOADTIME_OPT=1
else
CFLAGS += -DGC_ENABLE_LOADTIME_OPT=0
endif

ifeq ($(USE_MOVG), 1)
CFLAGS += -DgcdMOVG=1
else
CFLAGS += -DgcdMOVG=0
endif

ifeq ($(GC355_MEM_PRINT), 1)
CFLAGS += -DgcdGC355_MEM_PRINT=1
else
CFLAGS += -DgcdGC355_MEM_PRINT=0
endif

################################################################################
# Build with profiler
ifeq ($(USE_PROFILER),1)
CFLAGS += -DVIVANTE_PROFILER=1
CFLAGS += -DVIVANTE_PROFILER_CONTEXT=1
else
CFLAGS += -DVIVANTE_PROFILER=0
CFLAGS += -DVIVANTE_PROFILER_CONTEXT=0
endif

ifneq ($(USE_MULTI_GPU), )
CFLAGS += -DgcdMULTI_GPU=$(USE_MULTI_GPU)
endif

ifeq ($(ENABLE_GPUTEX), 1)
CFLAGS += -I$(ANDROID_HOME)/vendor/marvell/generic/gpu-engine/tex/include
endif

ifeq ($(NEW_COMPILER), 1)
CFLAGS += -DNEW_COMPILER=1
else
CFLAGS += -DNEW_COMPILER=0
endif

VIVANTE_SDK_DIR ?= $(AQROOT)/build/sdk
VIVANTE_SDK_INC ?= $(VIVANTE_SDK_DIR)/include
VIVANTE_SDK_LIB ?= $(VIVANTE_SDK_DIR)/drivers

ifeq ($(EGL_API_WL), 1)
	WAYLAND_DIR ?= $(AQROOT)/../wayland/src
endif

################################################################################
#
# Third party resources, DFB_DIR to specify DirectFB SDK path
# To build DirectFB Accelerator and gfx test, must set DFB_DIR
#
#DFB_DIR ?= $(TOOL_DIR)/dfb

################################################################################
# Module directories.

# drivers
GAL_DIR         := $(AQROOT)/hal
GLES11_DIR      := $(AQROOT)/driver/khronos/libGLESv11
EGL_DIR         := $(AQROOT)/driver/khronos/libEGL
GLES2X_DIR      := $(AQROOT)/driver/khronos/libGLESv3


VG113D_DIR      := $(AQROOT)/driver/khronos/libOpenVG_3D/vg11/driver
VG112D_DIR      := $(AQROOT)/driver/khronos/libOpenVG

GL21_DIR        := $(AQROOT)/driver/khronos/libGL2

GFX_DIR         := $(AQROOT)/driver/dfb
CL11_DIR        := $(AQROOT)/driver/khronos/libCL
CL11_ICD_DIR    := $(AQROOT)/driver/khronos/libCL/icdloader
CLC_DIR         := $(AQROOT)/compiler/libCLC
CLICD_DIR       := $(AQROOT)/driver/khronos/libCL/icd

VSC_DIR         := $(AQROOT)/compiler/libVSC
GLSLC_DIR       := $(AQROOT)/compiler/libGLSLC
ifeq ($(ANDROID), 1)
GCU3_DIR        := $(AQROOT)/gcu3/proj/android
ifeq ($(USE_CLU), 1)
CLU_DIR         := $(AQROOT)/clu/proj/android
CLU20_DIR       := $(AQROOT)/clu_2.0/build/android
endif
else
GCU3_DIR        := $(AQROOT)/gcu3/proj/linux
endif

VIVANTE_LIB_DIR	:= $(AQROOT)/sdk/vivante

# applications
EGL_TEST_DIR	:= $(AQROOT)/test/egl
ES11_TEST_DIR   := $(AQROOT)/test/es11/Linux
ES2X_TEST_DIR   := $(AQROOT)/test/es20
ES2X_EXTERN_DIR := $(AQROOT)/test/es20/extern
ES20_TEST_DIR   := $(AQROOT)/sdk/samples/es20
CL11_TEST_DIR   := $(AQROOT)/test/cl11

ifeq ($(USE_VDK), 0)
TUTORIAL_DIR    := $(ES11_TEST_DIR)
endif
VDK_TEST_DIR    := $(AQROOT)/sdk/samples/vdk
HAL_TEST_DIR    := $(AQROOT)/sdk
HAL_CUSTOM_DIR	:= $(AQROOT)/test/hal/Linux/custom
CHIPINFO_DIR    := $(AQROOT)/test/hal/common/chipinfo
VDK_DIR         := $(AQROOT)/sdk/vdk

ifeq ($(USE_VDK), 1)
CONFORM_DIR     := $(AQROOT)/test/es11/conform
else
# old es11 conformce test was removed
# $(AQROOT)/driver/khronos/es11/test/conform
CONFORM_DIR	    :=
endif

GLBES11_DIR     := $(AQROOT)/test/es11/GLBenchmark_ES1.1v2
GLBES20_DIR     := $(AQROOT)/test/es20/GLBenchmark2_RC2
GLBES30_DIR     := $(AQROOT)/../../../TEST/SW/Benchmarks/Kishonti/GLBenchmark3.0/AA21A9
GLBESNAVI11_DIR := $(AQROOT)/test/es11/GLBenchmark_Navi_Beta2/es11
GLBESNAVI20_DIR := $(AQROOT)/test/es11/GLBenchmark_Navi_Beta2/es20
GLBESNAVI_DIR   := $(AQROOT)/test/es20/GLBenchNavi
#GLBESNAVI_DIR   := $(AQROOT)/test/es20/GLBenchmark_navi
GTF_DIR         := $(AQROOT)/test/es20/conform/GTF_ES/glsl/GTF
CTS_ES30_DIR    := $(AQROOT)/../../../TEST/SW/Khronos/Conformance/es30/conform/GTF_ES/glsl/GTF
VGMARK_DIR      := $(AQROOT)/test/vg/common/VGMark_10_src
VGMARK11_DIR    := $(AQROOT)/test/vg11/VGMark11/VGMark11_addendum
VGCTS_DIR       := $(AQROOT)/test/vg/ovg_1.0.1_cts_rc10
VGCTS11_DIR     := $(AQROOT)/test/vg/ovg_1.1_cts_rc10
ifeq ($(USE_VDK), 1)
MM06_DIR        := $(AQROOT)/test/es11/common/3DMarkMobile06/configuration/vdk
else
MM06_DIR        := $(ES11_TEST_DIR)/3DMarkMobile06
endif
MM07_DIR        := $(ES2X_TEST_DIR)/3DMarkMobileES2_RC_src
MM07U_DIR       := $(ES2X_TEST_DIR)/3DMarkMobileES2_Update
SM20_DIR        := $(AQROOT)/test/es20/SimulationMark_ES_2.0
KANZI_DIR       := $(AQROOT)/test/es20/Kanzi_UI_demo/Kanzi_UI_src
AB20_DIR        := $(ES2X_TEST_DIR)/Automotive
JRC_DIR         := $(ES2X_TEST_DIR)/JRC
GFX_TEST_DIR    := $(AQROOT)/test/gfx
ES20_GEARS_DIR  := $(AQROOT)/test/es20/gles2-cm-gears
ES11_UNIT_DIR   := $(AQROOT)/test/es11/common/UnitTest
ES11_EXTERN_DIR := $(AQROOT)/test/es11/extern
ES11_EXTENSION_DIR := $(AQROOT)/test/es11/Extensions
ES11_GEARS_DIR	:= $(AQROOT)/test/es11/gles1-cm-gears
VG11_UNIT_DIR   := $(AQROOT)/test/vg11/UnitTest
VG11_EXTERN_DIR := $(AQROOT)/test/vg11/extern
CL11_UNIT_DIR   := $(AQROOT)/test/cl11/UnitTest
CL11_EXTERN_DIR := $(AQROOT)/test/cl11/extern
CL11_CONFORM_DIR := $(AQROOT)/test/cl11/conform
CL11_SAMPLE_DIR := $(AQROOT)/sdk/samples/cl11


TEXTURE5_DIR    := $(ES2X_TEST_DIR)/texture5
TEXTURE7_DIR    := $(ES2X_TEST_DIR)/texture7

ACTINIUM_DIR    := $(ES2X_TEST_DIR)/actinium
VVLAUNCHER_DIR  := $(ES2X_TEST_DIR)/vv_launcher

VIDEOCUBE_DIR	:= $(AQROOT)/test/es11/extern/VideoCube
VC_TESTCASE_DIR := $(AQROOT)/test/es20/vCompiler_Testcase

################################################################################
# Platform specific configs.

THIRDPARTY_CUSTOMER ?=
THIRDPARTY_TYPE ?=

