/* Marvell ISP S5K5E2 Driver
 *
 * Copyright (C) 2009-2014 Marvell International Ltd.
 *
 * Based on mt9v011 -Micron 1/4-Inch VGA Digital Image S5K5E2
 *
 * Copyright (c) 2009 Mauro Carvalho Chehab (mchehab@redhat.com)
 * This code is placed under the terms of the GNU General Public License v2
 */

#ifndef	B52_S5K5E2_H
#define	B52_S5K5E2_H

#include <media/b52-sensor.h>

struct regval_tab s5k5e2_res_init[] = {
#if 1
    /*MIPI[width:2560,height:1920,lane:2,format:raw10,datarate:500] */
	{0x0100, 0x00},
	/*addedb by owen*/
	{0x340f, 0x81},
	{0x3000, 0x04},
	{0x3002, 0x03},
	{0x3003, 0x04},
	{0x3004, 0x02},
	{0x3005, 0x00},
	{0x3006, 0x10},
	{0x3007, 0x03},
	{0x3008, 0x55},
	{0x3039, 0x00},
	{0x303A, 0x00},
	{0x303B, 0x00},
	{0x3009, 0x05},
	{0x300A, 0x55},
	{0x300B, 0x38},
	{0x300C, 0x10},
	{0x3012, 0x05},
	{0x3013, 0x00},
	{0x3014, 0x22},
	{0x300E, 0x79},
	{0x3010, 0x68},
	{0x3019, 0x03},
	{0x301A, 0x00},
	{0x301B, 0x06},
	{0x301C, 0x00},
	{0x301D, 0x22},
	{0x301E, 0x00},
	{0x301F, 0x10},
	{0x3020, 0x00},
	{0x3021, 0x00},
	{0x3022, 0x0A},
	{0x3023, 0x1E},
	{0x3024, 0x00},
	{0x3025, 0x00},
	{0x3026, 0x00},
	{0x3027, 0x00},
	{0x3028, 0x1A},
	{0x3015, 0x00},
	{0x3016, 0x84},
	{0x3017, 0x00},
	{0x3018, 0xA0},
	{0x302B, 0x10},
	{0x302C, 0x0A},
	{0x302D, 0x06},
	{0x302E, 0x05},
	{0x302F, 0x0E},
	{0x3030, 0x2F},
	{0x3031, 0x08},
	{0x3032, 0x05},
	{0x3033, 0x09},
	{0x3034, 0x05},
	{0x3035, 0x00},
	{0x3036, 0x00},
	{0x3037, 0x00},
	{0x3038, 0x00},
	{0x3088, 0x06},
	{0x308A, 0x08},
	{0x308C, 0x05},
	{0x308E, 0x07},
	{0x3090, 0x06},
	{0x3092, 0x08},
	{0x3094, 0x05},
	{0x3096, 0x21},
	{0x3099, 0x0E},
	{0x3070, 0x10},
	{0x3085, 0x11},
	{0x3086, 0x01},

	{0x3064, 0x00},
	{0x3062, 0x08},
	{0x3061, 0x11},
	{0x307B, 0x20},
	{0x3068, 0x00},
	{0x3074, 0x00},
	{0x307D, 0x00},
	{0x3045, 0x01},
	{0x3046, 0x05},
	{0x3047, 0x78},
	{0x307F, 0xB1},
	{0x3098, 0x01},
	{0x305C, 0xF6},
	{0x306B, 0x10},
	{0x3063, 0x27},
	{0x3400, 0x01},
	{0x3235, 0x49},
	{0x3233, 0x00},
	{0x3234, 0x00},
	{0x3300, 0x0C},

	{0x3203, 0x45},
	{0x3205, 0x4D},
	{0x320B, 0x40},
	{0x320C, 0x06},
	{0x320D, 0xC0},

	{0x0136, 0x1A},
	{0x0137, 0x00},

	{0x0305, 0x05},
	{0x0306, 0x00},
	{0x0307, 0xAC},
	{0x3C1F, 0x00},
	{0x0820, 0x03},
	{0x0821, 0x80},
	{0x3C1C, 0x54},



	{0x0114, 0x01},/*Lanes, 0: 1lane, 1: 2 lanes*/
	{0x0340, 0x07},/*VTS ?*/
	{0x0341, 0xE4},
	{0x0342, 0x0B},/*HTS ?*/
	{0x0343, 0x86},
	{0x0344, 0x00},
	{0x0345, 0x08},
	{0x0346, 0x00},
	{0x0347, 0x08},
	{0x0348, 0x0A},
	{0x0349, 0x07},
	{0x034A, 0x07},
	{0x034B, 0x87},
	{0x034C, 0x0A},/* X_OUTPUT_SIZE*/
	{0x034D, 0x00},
	{0x034E, 0x07},/* Y_OUTPUT_SIZE*/
	{0x034F, 0x80},
	{0x0900, 0x00},
	{0x0901, 0x20},
	{0x0387, 0x01},
	{0x0204, 0x00},
	{0x0205, 0x20},
	{0x0202, 0x00},
	{0x0203, 0x04},
	{0x0200, 0x04},
	{0x0201, 0x98},

	{0x3400, 0x00},
	{SENSOR_MDELAY, SENSOR_MDELAY, 5},
	{0x3b4c, 0x00},
	{0x3b4c, 0x01},

	/*{0x0100, 0x01},*/

#else
    /*MIPI[width:2560,height:1920,lane:2,format:raw10,datarate:500] */
	{0x0100, 0x00},
	{0x3000, 0x04},
	{0x3002, 0x03},
	{0x3003, 0x04},
	{0x3004, 0x02},
	{0x3005, 0x00},
	{0x3006, 0x10},
	{0x3007, 0x03},
	{0x3008, 0x55},
	{0x3039, 0x00},
	{0x303A, 0x00},
	{0x303B, 0x00},
	{0x3009, 0x05},
	{0x300A, 0x55},
	{0x300B, 0x38},
	{0x300C, 0x10},
	{0x3012, 0x05},
	{0x3013, 0x00},
	{0x3014, 0x22},
	{0x300E, 0x79},
	{0x3010, 0x68},
	{0x3019, 0x03},
	{0x301A, 0x00},
	{0x301B, 0x06},
	{0x301C, 0x00},
	{0x301D, 0x22},
	{0x301E, 0x00},
	{0x301F, 0x10},
	{0x3020, 0x00},
	{0x3021, 0x00},
	{0x3022, 0x0A},
	{0x3023, 0x1E},
	{0x3024, 0x00},
	{0x3025, 0x00},
	{0x3026, 0x00},
	{0x3027, 0x00},
	{0x3028, 0x1A},
	{0x3015, 0x00},
	{0x3016, 0x84},
	{0x3017, 0x00},
	{0x3018, 0xA0},
	{0x302B, 0x10},
	{0x302C, 0x0A},
	{0x302D, 0x06},
	{0x302E, 0x05},
	{0x302F, 0x0E},
	{0x3030, 0x2F},
	{0x3031, 0x08},
	{0x3032, 0x05},
	{0x3033, 0x09},
	{0x3034, 0x05},
	{0x3035, 0x00},
	{0x3036, 0x00},
	{0x3037, 0x00},
	{0x3038, 0x00},
	{0x3088, 0x06},
	{0x308A, 0x08},
	{0x308C, 0x05},
	{0x308E, 0x07},
	{0x3090, 0x06},
	{0x3092, 0x08},
	{0x3094, 0x05},
	{0x3096, 0x21},
	{0x3099, 0x0E},
	{0x3070, 0x10},
	{0x3085, 0x11},
	{0x3086, 0x01},

	{0x3064, 0x00},
	{0x3062, 0x08},
	{0x3061, 0x11},
	{0x307B, 0x20},
	{0x3068, 0x00},
	{0x3074, 0x00},
	{0x307D, 0x00},
	{0x3045, 0x01},
	{0x3046, 0x05},
	{0x3047, 0x78},
	{0x307F, 0xB1},
	{0x3098, 0x01},
	{0x305C, 0xF6},
	{0x306B, 0x10},
	{0x3063, 0x27},
	{0x3400, 0x01},
	{0x3235, 0x49},
	{0x3233, 0x00},
	{0x3234, 0x00},
	{0x3300, 0x0C},

	{0x3203, 0x45},
	{0x3205, 0x4D},
	{0x320B, 0x40},
	{0x320C, 0x06},
	{0x320D, 0xC0},

	{0x0136, 0x1A},
	{0x0137, 0x00},

	{0x0305, 0x05},
	{0x0306, 0x00},
	{0x0307, 0xAC},
	{0x3C1F, 0x00},
	{0x0820, 0x03},
	{0x0821, 0x80},
	{0x3C1C, 0x54},



	{0x0114, 0x01},/*Lanes, 0: 1lane, 1: 2 lanes*/
	{0x0340, 0x07},/*VTS ?*/
	{0x0341, 0xE4},
	{0x0342, 0x0B},/*HTS ?*/
	{0x0343, 0x86},
	{0x0344, 0x00},
	{0x0345, 0x08},
	{0x0346, 0x00},
	{0x0347, 0x08},
	{0x0348, 0x0A},
	{0x0349, 0x07},
	{0x034A, 0x07},
	{0x034B, 0x87},
	{0x034C, 0x0A},/* X_OUTPUT_SIZE*/
	{0x034D, 0x00},
	{0x034E, 0x07},/* Y_OUTPUT_SIZE*/
	{0x034F, 0x80},
	{0x0900, 0x00},
	{0x0901, 0x20},
	{0x0387, 0x01},
	{0x0204, 0x00},
	{0x0205, 0x20},
	{0x0202, 0x00},
	{0x0203, 0x04},
	{0x0200, 0x04},
	{0x0201, 0x98},

	/*{0x0100, 0x01},*/
#endif
};

struct regval_tab s5k5e2_fmt_raw10[] = {
};

struct regval_tab s5k5e2_res_5M[] = {

};


struct regval_tab s5k5e2_res_1M[] = {

};


struct regval_tab s5k5e2_id[] = {
	{0x0000, 0x5e, 0xff},
	{0x0001, 0x20, 0xff},
};

struct regval_tab s5k5e2_vts[] = {
	{0x0340, 0x07, 0xff},
	{0x0341, 0xe4, 0xff},
};

struct regval_tab s5k5e2_expo[] = {
	{0x0202, 0x04, 0xff},
	{0x0203, 0xE2, 0xff},
};

struct regval_tab s5k5e2_ag[] = {
	{0x0204, 0x00, 0xff},
	{0x0205, 0xF0, 0xff},
};

struct regval_tab s5k5e2_af[] = {
};

struct regval_tab s5k5e2_stream_on[] = {
	{0x0100, 0x01, 0xff},
};

struct regval_tab s5k5e2_stream_off[] = {
	{0x0100, 0x00, 0xff},
};

struct regval_tab s5k5e2_vflip[] = {
};

struct regval_tab s5k5e2_hflip[] = {
};

struct b52_sensor_i2c_attr s5k5e2_i2c_attr[] = {
	[0] = {
		.reg_len = I2C_16BIT,
		.val_len = I2C_8BIT,
		.addr = 0x10,
	},
};
#define N_S5K5E2_I2C_ATTR ARRAY_SIZE(s5k5e2_i2c_attr)
#define N_S5K5E2_INIT ARRAY_SIZE(s5k5e2_res_init)
#define N_S5K5E2_ID ARRAY_SIZE(s5k5e2_id)
#define N_S5K5E2_FMT_RAW10 ARRAY_SIZE(s5k5e2_fmt_raw10)
#define N_S5K5E2_5M ARRAY_SIZE(s5k5e2_res_5M)
#define N_S5K5E2_1M ARRAY_SIZE(s5k5e2_res_1M)
#define N_S5K5E2_VTS ARRAY_SIZE(s5k5e2_vts)
#define N_S5K5E2_EXPO ARRAY_SIZE(s5k5e2_expo)
#define N_S5K5E2_AG ARRAY_SIZE(s5k5e2_ag)
#define N_S5K5E2_AF ARRAY_SIZE(s5k5e2_af)
#define N_S5K5E2_STREAM_ON ARRAY_SIZE(s5k5e2_stream_on)
#define N_S5K5E2_STREAM_OFF ARRAY_SIZE(s5k5e2_stream_off)
#define N_S5K5E2_HFLIP ARRAY_SIZE(s5k5e2_hflip)
#define N_S5K5E2_VFLIP ARRAY_SIZE(s5k5e2_vflip)

struct b52_sensor_mbus_fmt s5k5e2_fmt = {
	.mbus_code	= V4L2_MBUS_FMT_SGRBG10_1X10,
	.colorspace	= V4L2_COLORSPACE_SRGB,
	.regs = {
		.tab = s5k5e2_fmt_raw10,
		.num = N_S5K5E2_FMT_RAW10,
	}
};
struct b52_sensor_resolution s5k5e2_res[] = {
	[0] = {
		 .width = 2560,
		 .height = 1920,
		 .hts = 0x0b86,
		 .min_vts = 0x07e4,
		 .prop = SENSOR_RES_BINING1,
		 .regs = {
			.tab = s5k5e2_res_5M,
			.num = N_S5K5E2_5M,
		},
	},

};

static int S5K5E2_get_pixelclock(struct v4l2_subdev *sd, u32 *rate, u32 mclk);
static int S5K5E2_get_dphy_desc(struct v4l2_subdev *sd, struct csi_dphy_desc *dphy_desc, u32 mclk);
static int S5K5E2_update_otp(struct v4l2_subdev *sd,
				struct b52_sensor_otp *otp);
static int b52_sensor_power_on_s5k5e2(struct v4l2_subdev *sd);

struct b52_sensor_spec_ops s5k5e2_ops = {
	.get_pixel_rate = S5K5E2_get_pixelclock,
	.get_dphy_desc = S5K5E2_get_dphy_desc,
	.power_on = b52_sensor_power_on_s5k5e2,
	.update_otp = S5K5E2_update_otp,
	};
struct b52_sensor_data b52_s5k5e2 = {
	.name = "ssa.s5k5e2",
	.type = SAMSUNG_ASNY_SENSOR,
	.chip_ident = V4L2_IDENT_S5K5E2,
	.i2c_attr = s5k5e2_i2c_attr,
	.num_i2c_attr = N_S5K5E2_I2C_ATTR,
	.id = {
		.tab = s5k5e2_id,
		.num = N_S5K5E2_ID,
	},
	.global_setting = {
		.tab = s5k5e2_res_init,
		.num = N_S5K5E2_INIT,
	},
	.mbus_fmt = &s5k5e2_fmt,
	.num_mbus_fmt = 1,
	.res = s5k5e2_res,
	.num_res = 1,
	.streamon = {
		.tab = s5k5e2_stream_on,
		.num = N_S5K5E2_STREAM_ON,
	},
	.streamoff = {
		.tab = s5k5e2_stream_off,
		.num = N_S5K5E2_STREAM_OFF,
	},
	.gain2iso_ratio = {
		.numerator = 100,
		.denominator = 0x10,
	},
	.vts_range = {0x07e4, 0x7fff},
	.gain_range = {
		[B52_SENSOR_AG] = {0x0010, 0x0100},
		[B52_SENSOR_DG] = {0x0010, 0x0010},
	},
	.expo_range = {0x07e4, 0x7fff},
	.focus_range = {0x0000, 0x0000},
	.vts_reg = {
		.tab = s5k5e2_vts,
		.num = N_S5K5E2_VTS,
	},
	.expo_reg = {
		.tab = s5k5e2_expo,
		.num = N_S5K5E2_EXPO,
	},
	.gain_reg = {
		[B52_SENSOR_AG] = {
			.tab = s5k5e2_ag,
			.num = N_S5K5E2_AG,
		},
		[B52_SENSOR_DG] = {
			.tab = NULL,
			.num = 0,
		},
	},
	.af_reg = {
		.tab = s5k5e2_af,
		.num = N_S5K5E2_AF,
	},
	.hflip = {
		.tab = s5k5e2_hflip,
		.num = N_S5K5E2_HFLIP,
	},
	.vflip = {
		.tab = s5k5e2_vflip,
		.num = N_S5K5E2_VFLIP,
	},
	.gain_shift = 0,
	.calc_dphy = 0,
	.nr_lane = 2,
	.ops = &s5k5e2_ops,
};

#endif

